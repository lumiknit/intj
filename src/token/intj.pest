/// INTJ pest grammar (PEG)

/// Root rule. (whole file)
root = {
  SOI ~ body ~ EOI
}

body = _{ expr* }

expr = { docstring | line_comment | !comment_symbols ~ (line_separator | import | list | string_literal | number | ident_symbol | assign | ident) }

// Seperator

docstring          = {
  (hidden_line_separator? ~ "///" ~ docstring_contents)+
}
docstring_contents = { until_eol }

line_comment = _{ ("//" | "#!") ~ until_eol }

// Import
import       = { import_open ~ import_body ~ import_close }
import_open  = { "#(" }
import_close = { ")" }
import_body  = { line_separator? ~ (import_item ~ line_separator?)* ~ line_separator? }
import_item  = { assign? ~ string_literal }

// List

list = _{ fn | array | object }

fn     = { fn_open ~ body ~ fn_close }
object = { obj_open ~ body ~ obj_close }
array  = { arr_open ~ body ~ arr_close }

// Numeric value
number     = @{ number_sgn? ~ number_dec ~ number_exp? }
number_sgn = @{ "+" | "-" }
number_dec = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT*)? }
number_oct = @{ "0o" ~ ASCII_OCT_DIGIT+ }
number_hex = @{ "0x" ~ ASCII_HEX_DIGIT+ }
number_exp = @{ ("e" | "E") ~ ("-" | "+")? ~ ASCII_DIGIT+ }

// String literal
string_literal = { (string_sq | string_dq) ~ symbol_mark? }

string_sq          = ${ single_quote ~ string_contents_sq ~ single_quote }
string_contents_sq = @{ (!single_quote ~ (escaped_char | non_escaped_char))* }
string_dq          = ${ double_quote ~ string_contents_dq ~ double_quote }
string_contents_dq = @{ (!double_quote ~ (escaped_char | non_escaped_char))* }
escaped_char       = _{ "\\" ~ ANY }
non_escaped_char   = _{ !"\\" ~ ANY }

// Identifier
ident             =  { common_ident | ident_bq }
common_ident      = @{ id_char+ }
ident_bq          = ${ back_quote ~ ident_contents_bq ~ back_quote }
ident_contents_bq = @{ (!back_quote ~ ANY)* }

// Assignment
assign                 =  { common_assign | assign_bq }
common_assign          = @{ common_assign_contents ~ WHITESPACE* ~ "=" ~ !id_char }
common_assign_contents = ${ non_op_id_char+ ~ (op_char+ ~ non_op_id_char+)* }
assign_bq              = ${ back_quote ~ ident_contents_bq ~ back_quote ~ WHITESPACE* ~ "=" ~ !id_char }

// Symbol mark
symbol_mark = @{ ":" }

ident_symbol = { ident ~ hidden_line_separator? ~ symbol_mark }

// Reserved characters

line_separator        =  {
  ("," | "\n")+
}
hidden_line_separator = _{ ("," | "\n")+ }

reserved_char = _{ ('\x00'..' ') | "(" | ")" | "{" | "}" | "[" | "]" | "," | ":" | "'" | "\"" | "`" | "#" }
op_char       = _{ "~" | "!" | "@" | "$" | "%" | "^" | "&" | "*" | "-" | "+" | "=" | "|" | "<" | ">" | ";" | "." | "?" | "\\" | "/" }

id_char        = _{ !reserved_char ~ ANY }
non_op_id_char = _{ !(reserved_char | op_char) ~ ANY }

fn_open      = { "(" }
fn_close     = { ")" }
obj_open     = { "{" }
obj_close    = { "}" }
arr_open     = { "[" }
arr_close    = { "]" }
single_quote = { "'" }
double_quote = { "\"" }
back_quote   = { "`" }

comment_symbols = { "/*" | "*/" | "//" }

// Common rules
until_eol = _{ (!"\n" ~ ANY)* }

// Predefined Rules
COMMENT    = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
WHITESPACE = _{ !"\n" ~ ('\x00'..' ') }
